const data = require('/workspaces/db-workshops/restaurants.json')

use('test');
db.rest.drop();
db.rest.insertMany(data);

// Write a MongoDB query to display all the documents in the collection restaurants.
db.rest.find().limit(2)

// Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant.
const query = {}
const projection = { restaurant_id: 1, name: 1, borough: 1, cuisine: 1 }
db.rest.find(query, projection)


//  Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection restaurant.
const query = {}
const projection = { restaurant_id: 1, name: 1, borough: 1, cuisine: 1, _id: 0 }
db.rest.find(query, projection)

// Write a MongoDB query to display the fields restaurant_id, name, borough and zip code, but exclude the field _id for all the documents in the collection restaurant.
const query = {}
const projection = { restaurant_id: 1, name: 1, borough: 1, 'address.zipcode': 1 , _id: 0 }
db.rest.find(query, projection)

// Write a MongoDB query to display all the restaurant which is in the borough Bronx.
const query = { borough: 'Bronx' }
const projection = {}
db.rest.find(query, projection)

// 6-9
// Write a MongoDB query to display the first 5 restaurant which is in the borough Bronx.
const query = { borough: 'Bronx' } // where clause 
const projection = { } // select (names of columns, properties)
db.rest.find(query, projection).limit(5)

// Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx.
const query = { borough: 'Bronx' } 
const projection = { }
db.rest.find(query, projection).skip(5).limit(5)

// Write a MongoDB query to find the restaurants who achieved a score more than 90.
const query = { 'grades.score': { $gt: 90 } } 
const projection = { }
db.rest.find(query, projection)

// Write a MongoDB query to find the restaurants that achieved a score, more than 80 but less than 100.
const query = { 'grades.score': { $gt: 80, $lt: 100 } }
const projection = { }
db.rest.find(query, projection)

// Write a MongoDB query to find the restaurants which locate in longitute value less than -95.754168
const query = { 'address.coord.0': { $lt: -95.754168 } }
const projection = { }
db.rest.find(query, projection)

// Write a MongoDB query to find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168.
const query = { 
  'address.coord.0': { $lt: -65.754168 },
  'cuisine': { $not: { $eq: 'American '} },  
  'grades.score': { $gt: 70 }
}
const projection = { }
db.rest.find(query, projection)

//Write a MongoDB query to find the restaurants which belong to the borough Bronx and prepared either American or Chinese dish.

const query = {borough: 'Bronx', cuisine: {$in: ['American ', 'Chinese']}}
const projection = { }
db.rest.find(query, projection)


const query = {
$or: [{cuisine: {$nin: ["American ", "Chinese"]}}, 
'name': { $regex: /^Wil/}}]
const projection = { _id: 1, name: 1, borough: 1, cuisine: 1 }
db.rest.find(query, projection)

const query = {
$and: [{cuisine: { $not: {$eq: "American "}}},
{cuisine: { $not: {$eq: "Chinese"}}},
{name: {$regex: /^Wil/}}]
}
const projection = { _id: 1, name: 1, borough: 1, cuisine: 1 }
db.rest.find(query, projection)

// 'borough': {$or: { $eq: 'Staten Island'}, { $eq: 'Queens'}}

// Write a MongoDB query to find the restaurant Id, name, 
// address and geographical location for those restaurants 
// where 2nd element of coord array contains a value which is 
// more than 42 and upto 52..

const query = { $and: [{'address.coord.1': {$gt: 42}}, {'address.coord.1': {$lt: 52}}]}
const projection = { restaurant_id: 1, name: 1, address: 1, borough: 1}
db.rest.find(query, projection)

const query = {'address.coord.1': {$gt: 42, $lt: 52}}
const projection = { restaurant_id: 1, name: 1, address: 1, borough: 1}
db.rest.find(query, projection)

// Write a MongoDB query to arrange the name of the restaurants 
// in ascending order along with all the columns.

const query = {}
const projection = { name: 1 }
db.rest.find(query, projection).sort({ name: 1 })

// const restaurants = db.rest.find(query, projection)
// db.restaurants.sort({ name: 1 })

// 26. Write a MongoDB query to arrange the name of the restaurants 
// in descending along with all the columns.

const query = {}
const projection = { name: 1 }
db.rest.find(query, projection).sort({ name: -1 })

// 27. Write a MongoDB query to arranged the name of the cuisine in ascending order and for that same cuisine borough 
//should be in descending order.



